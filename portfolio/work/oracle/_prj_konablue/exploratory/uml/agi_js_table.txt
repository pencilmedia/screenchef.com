/*
	Agile Table Class
	
	Notes:
	1) All sizing metrics, etc should be preformed by another class
	2) dndObj here is used to represent both drag'n'drop operations as well
		as probably cut and paste ones, since DND will be built on cut/paste
	3) dataObj is used here to indicate where to load data from. thus it could
		mask an AJAX implementation, or any other.
	4) Whatever is in here is totally just a quick brain dump based on the 
		table reqs doc from Dave. Feel free to expand, delete, abstract, etc.
*/

class AgileTable {

	var dataObj;
	var dndObj;
	var tableObj;
	var featuresStruct;
	
	__construct(features, data_obj, dnd_obj) {
		this.featuresStruct = features;
		this.tableObj = this.buildTable();
		this.dataObj = setDataObj(data_obj);
		this.dndObj = setDNDObj(dnd_obj);
	}
	
	buildTable() {
		var table = document.createElement("table");
		this.enableFeatures();
		if (saved_prefs) {
			// execute prefs setting (eg: reorder columns)
		}
		return (table);
	}
	
	setDataObj(data_obj) {
		if (defined(data_obj)) {
			return (data_obj);
		} else {
			data_obj = new DataObject();
			return (data_obj);
		}
	}
	
	setDNDObj(dnd_obj) {
		if (defined(dnd_obj)) {
			return (dnd_obj);
		} else {
			dnd_obj = new DNDObject();
			return (dnd_obj);
		}
	}
	
	fetchData() {
		// Assuming a method fetchData with a callback
		this.dataObj.fetchData(this.appendData);
	}
	
	appendData(data) {
		for (var i=0; i<data.length; i++) {
			row = this.appendRow(data[i]);
			this.tableObj.appendChild(row);
		}
	}
	
	appendRow(data) {
		var row = document.createElement("tr");
		for (var i=0; i<data.length; i++) {
			cell = this.appendCell(data[i]);
			row.appendChild(cell);
		}
		return (row);
	}
	
	appendCell(data) {
		var cell = document.createElement("td");
		var contents = document.createTextNode(data);
		cell.appendChild(contents);
		return (cell);
	}

	enableFeatures() {
		for (var i=0; i<featuresStruct.length; i++) {
			enable(featuresStruct[i]);
		}
	}

	enable(feature) {
		switch (feature) {
			case 'abc':
				featureXYZ(true);
				break;
			default:
				break;
		}
	}
	
	disable(feature) {
		switch (feature) {
			case 'abc':
				featureXYZ(false);
				break;
			default:
				break;
		}
	}

	featureXYZ(bool_enabled) {
		// do something
	}

	dragColumn(evt, column) {
		// callback for drag event; likely calls the size function twice, once
		// for each affected column
	}

	dragRow(evt, row) {
		// callback for drag event; likely calls the size function twice, once
		// for each affected row
	}
	
	resizeColumn(column) {
		// sizes "column"
	}
	
	resizeRow(column) {
		// sizes "row"
	}
	
	highlightColumn(column) {
		// highlight "column"
	}

	highlightRow(row) {
		// highlight "row"
	}
	
	selectColumn(column) {
		// select "column" and store for possible submission
	}

	selectRow(row) {
		// select "row" and store for possible submission
	}	

	freezeColumn(column) {
		// disallows resizing and/or dragging
	}
	
	sortRows(sort_on, sort_order) {
		// really complex sort functions live here
		// probably dispatches to particular sort functions
	}
	
	becomeEditable(cell) {
		// based on attribs of cell (data, etc) determine how to make
		// editable, then swap to edit state
	}
	
	becomeDisplay(cell) {
		// if edited, try saving
		// then become display only again
		if (edit == true) {
			if (validate(cell)) {
				saveEdit(cell);
			}
		}
	}
	
	validate(obj) {
		// extract edit from obj
		// validate the data
	}
	
	saveEdit(obj) {
		// extract edit from obj
		// use the data to submit
		this.dataObj.saveData(data);
	}

	recieveDrop(evt) {
		// call out to dnd to figure out what to do, then do it
		// assuming it can extract data from the "evt" and callback
		this.dndObj.handleDrop(evt, this.paste);
	}
	
	fill(cell, direction) {
		// based on "data" from "cell" and what direction is given
		// fill sibling "cells" with "data"
	}
	
	copy(obj_list) {
		for (obj in obj_list) {
			copy2clip(obj.data);
		}
	}
	
	paste(obj_list) {
		for (obj in obj_list) {
			appendRow(obj.data);
		}
	}
	
	saveTable() {
		// submit various characteristics in some structured form to
		// be saved to the user. this is how column order, etc will make
		// its round trip
	}

}